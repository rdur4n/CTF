/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "DebugProtoTest_constants.h"

namespace thrift { namespace test { namespace debug {

const DebugProtoTestConstants g_DebugProtoTest_constants;

DebugProtoTestConstants::DebugProtoTestConstants() {
  COMPACT_TEST.a_byte = 127;
  COMPACT_TEST.__isset.a_byte = true;
  COMPACT_TEST.a_double = 5.6788999999999996;
  COMPACT_TEST.__isset.a_double = true;
  COMPACT_TEST.a_i16 = 32000;
  COMPACT_TEST.__isset.a_i16 = true;
  COMPACT_TEST.a_i32 = 1000000000;
  COMPACT_TEST.__isset.a_i32 = true;
  COMPACT_TEST.a_i64 = 1099511627775LL;
  COMPACT_TEST.__isset.a_i64 = true;
  COMPACT_TEST.a_string = "my string";
  COMPACT_TEST.__isset.a_string = true;
  std::map<bool, int8_t>  tmp639;
  tmp639.insert(std::make_pair(false, 0));
  tmp639.insert(std::make_pair(true, 1));

  COMPACT_TEST.boolean_byte_map = tmp639;
  COMPACT_TEST.__isset.boolean_byte_map = true;
  std::vector<bool>  tmp640;
  tmp640.push_back(true);
  tmp640.push_back(true);
  tmp640.push_back(true);
  tmp640.push_back(false);
  tmp640.push_back(false);
  tmp640.push_back(false);

  COMPACT_TEST.boolean_list = tmp640;
  COMPACT_TEST.__isset.boolean_list = true;
  std::set<bool>  tmp641;
  tmp641.insert(true);
  tmp641.insert(false);

  COMPACT_TEST.boolean_set = tmp641;
  COMPACT_TEST.__isset.boolean_set = true;
  std::map<int8_t, bool>  tmp642;
  tmp642.insert(std::make_pair(1, true));
  tmp642.insert(std::make_pair(2, false));

  COMPACT_TEST.byte_boolean_map = tmp642;
  COMPACT_TEST.__isset.byte_boolean_map = true;
  std::map<int8_t, int8_t>  tmp643;
  tmp643.insert(std::make_pair(1, 2));

  COMPACT_TEST.byte_byte_map = tmp643;
  COMPACT_TEST.__isset.byte_byte_map = true;
  std::map<int8_t, double>  tmp644;
  tmp644.insert(std::make_pair(1, 0.1000000000000000));
  tmp644.insert(std::make_pair(2, -0.1000000000000000));
  tmp644.insert(std::make_pair(3, 1000000.0999999999767169));

  COMPACT_TEST.byte_double_map = tmp644;
  COMPACT_TEST.__isset.byte_double_map = true;
  std::map<int8_t, int16_t>  tmp645;
  tmp645.insert(std::make_pair(1, 1));
  tmp645.insert(std::make_pair(2, -1));
  tmp645.insert(std::make_pair(3, 32767));

  COMPACT_TEST.byte_i16_map = tmp645;
  COMPACT_TEST.__isset.byte_i16_map = true;
  std::map<int8_t, int32_t>  tmp646;
  tmp646.insert(std::make_pair(1, 1));
  tmp646.insert(std::make_pair(2, -1));
  tmp646.insert(std::make_pair(3, 2147483647));

  COMPACT_TEST.byte_i32_map = tmp646;
  COMPACT_TEST.__isset.byte_i32_map = true;
  std::map<int8_t, int64_t>  tmp647;
  tmp647.insert(std::make_pair(1, 1LL));
  tmp647.insert(std::make_pair(2, -1LL));
  tmp647.insert(std::make_pair(3, 9223372036854775807LL));

  COMPACT_TEST.byte_i64_map = tmp647;
  COMPACT_TEST.__isset.byte_i64_map = true;
  std::vector<int8_t>  tmp648;
  tmp648.push_back(-127);
  tmp648.push_back(-1);
  tmp648.push_back(0);
  tmp648.push_back(1);
  tmp648.push_back(127);

  COMPACT_TEST.byte_list = tmp648;
  COMPACT_TEST.__isset.byte_list = true;
  std::map<int8_t, std::vector<int8_t> >  tmp649;
  std::vector<int8_t>  tmp650;

  tmp649.insert(std::make_pair(0, tmp650));
  std::vector<int8_t>  tmp651;
  tmp651.push_back(1);

  tmp649.insert(std::make_pair(1, tmp651));
  std::vector<int8_t>  tmp652;
  tmp652.push_back(1);
  tmp652.push_back(2);

  tmp649.insert(std::make_pair(2, tmp652));

  COMPACT_TEST.byte_list_map = tmp649;
  COMPACT_TEST.__isset.byte_list_map = true;
  std::map<int8_t, std::map<int8_t, int8_t> >  tmp653;
  std::map<int8_t, int8_t>  tmp654;

  tmp653.insert(std::make_pair(0, tmp654));
  std::map<int8_t, int8_t>  tmp655;
  tmp655.insert(std::make_pair(1, 1));

  tmp653.insert(std::make_pair(1, tmp655));
  std::map<int8_t, int8_t>  tmp656;
  tmp656.insert(std::make_pair(1, 1));
  tmp656.insert(std::make_pair(2, 2));

  tmp653.insert(std::make_pair(2, tmp656));

  COMPACT_TEST.byte_map_map = tmp653;
  COMPACT_TEST.__isset.byte_map_map = true;
  std::set<int8_t>  tmp657;
  tmp657.insert(-127);
  tmp657.insert(-1);
  tmp657.insert(0);
  tmp657.insert(1);
  tmp657.insert(127);

  COMPACT_TEST.byte_set = tmp657;
  COMPACT_TEST.__isset.byte_set = true;
  std::map<int8_t, std::set<int8_t> >  tmp658;
  std::set<int8_t>  tmp659;

  tmp658.insert(std::make_pair(0, tmp659));
  std::set<int8_t>  tmp660;
  tmp660.insert(1);

  tmp658.insert(std::make_pair(1, tmp660));
  std::set<int8_t>  tmp661;
  tmp661.insert(1);
  tmp661.insert(2);

  tmp658.insert(std::make_pair(2, tmp661));

  COMPACT_TEST.byte_set_map = tmp658;
  COMPACT_TEST.__isset.byte_set_map = true;
  std::map<int8_t, std::string>  tmp662;
  tmp662.insert(std::make_pair(1, ""));
  tmp662.insert(std::make_pair(2, "blah"));
  tmp662.insert(std::make_pair(3, "loooooooooooooong string"));

  COMPACT_TEST.byte_string_map = tmp662;
  COMPACT_TEST.__isset.byte_string_map = true;
  std::map<double, int8_t>  tmp663;
  tmp663.insert(std::make_pair(-1.1000000000000001, 1));
  tmp663.insert(std::make_pair(1.1000000000000001, 1));

  COMPACT_TEST.double_byte_map = tmp663;
  COMPACT_TEST.__isset.double_byte_map = true;
  std::vector<double>  tmp664;
  tmp664.push_back(0.1000000000000000);
  tmp664.push_back(0.2000000000000000);
  tmp664.push_back(0.3000000000000000);

  COMPACT_TEST.double_list = tmp664;
  COMPACT_TEST.__isset.double_list = true;
  std::set<double>  tmp665;
  tmp665.insert(0.1000000000000000);
  tmp665.insert(0.2000000000000000);
  tmp665.insert(0.3000000000000000);

  COMPACT_TEST.double_set = tmp665;
  COMPACT_TEST.__isset.double_set = true;
  Empty tmp666;

  COMPACT_TEST.empty_struct_field = tmp666;
  COMPACT_TEST.__isset.empty_struct_field = true;
  COMPACT_TEST.false_field = false;
  COMPACT_TEST.__isset.false_field = true;
  COMPACT_TEST.field20000 = 20000LL;
  COMPACT_TEST.__isset.field20000 = true;
  COMPACT_TEST.field500 = 500LL;
  COMPACT_TEST.__isset.field500 = true;
  COMPACT_TEST.field5000 = 5000LL;
  COMPACT_TEST.__isset.field5000 = true;
  std::map<int16_t, int8_t>  tmp667;
  tmp667.insert(std::make_pair(-1, 1));
  tmp667.insert(std::make_pair(1, 1));
  tmp667.insert(std::make_pair(32767, 1));

  COMPACT_TEST.i16_byte_map = tmp667;
  COMPACT_TEST.__isset.i16_byte_map = true;
  std::vector<int16_t>  tmp668;
  tmp668.push_back(-1);
  tmp668.push_back(0);
  tmp668.push_back(1);
  tmp668.push_back(32767);

  COMPACT_TEST.i16_list = tmp668;
  COMPACT_TEST.__isset.i16_list = true;
  std::set<int16_t>  tmp669;
  tmp669.insert(-1);
  tmp669.insert(0);
  tmp669.insert(1);
  tmp669.insert(32767);

  COMPACT_TEST.i16_set = tmp669;
  COMPACT_TEST.__isset.i16_set = true;
  std::map<int32_t, int8_t>  tmp670;
  tmp670.insert(std::make_pair(-1, 1));
  tmp670.insert(std::make_pair(1, 1));
  tmp670.insert(std::make_pair(2147483647, 1));

  COMPACT_TEST.i32_byte_map = tmp670;
  COMPACT_TEST.__isset.i32_byte_map = true;
  std::vector<int32_t>  tmp671;
  tmp671.push_back(-1);
  tmp671.push_back(0);
  tmp671.push_back(255);
  tmp671.push_back(65535);
  tmp671.push_back(16777215);
  tmp671.push_back(2147483647);

  COMPACT_TEST.i32_list = tmp671;
  COMPACT_TEST.__isset.i32_list = true;
  std::set<int32_t>  tmp672;
  tmp672.insert(1);
  tmp672.insert(2);
  tmp672.insert(3);

  COMPACT_TEST.i32_set = tmp672;
  COMPACT_TEST.__isset.i32_set = true;
  std::map<int64_t, int8_t>  tmp673;
  tmp673.insert(std::make_pair(-1LL, 1));
  tmp673.insert(std::make_pair(0LL, 1));
  tmp673.insert(std::make_pair(1LL, 1));
  tmp673.insert(std::make_pair(9223372036854775807LL, 1));

  COMPACT_TEST.i64_byte_map = tmp673;
  COMPACT_TEST.__isset.i64_byte_map = true;
  std::vector<int64_t>  tmp674;
  tmp674.push_back(-1LL);
  tmp674.push_back(0LL);
  tmp674.push_back(255LL);
  tmp674.push_back(65535LL);
  tmp674.push_back(16777215LL);
  tmp674.push_back(4294967295LL);
  tmp674.push_back(1099511627775LL);
  tmp674.push_back(281474976710655LL);
  tmp674.push_back(72057594037927935LL);
  tmp674.push_back(9223372036854775807LL);

  COMPACT_TEST.i64_list = tmp674;
  COMPACT_TEST.__isset.i64_list = true;
  std::set<int64_t>  tmp675;
  tmp675.insert(-1LL);
  tmp675.insert(0LL);
  tmp675.insert(255LL);
  tmp675.insert(65535LL);
  tmp675.insert(16777215LL);
  tmp675.insert(4294967295LL);
  tmp675.insert(1099511627775LL);
  tmp675.insert(281474976710655LL);
  tmp675.insert(72057594037927935LL);
  tmp675.insert(9223372036854775807LL);

  COMPACT_TEST.i64_set = tmp675;
  COMPACT_TEST.__isset.i64_set = true;
  std::map<std::vector<int8_t> , int8_t>  tmp676;
  std::vector<int8_t>  tmp677;

  tmp676.insert(std::make_pair(tmp677, 0));
  std::vector<int8_t>  tmp678;
  tmp678.push_back(0);
  tmp678.push_back(1);

  tmp676.insert(std::make_pair(tmp678, 2));
  std::vector<int8_t>  tmp679;
  tmp679.push_back(1);
  tmp679.push_back(2);
  tmp679.push_back(3);

  tmp676.insert(std::make_pair(tmp679, 1));

  COMPACT_TEST.list_byte_map = tmp676;
  COMPACT_TEST.__isset.list_byte_map = true;
  std::map<std::map<int8_t, int8_t> , int8_t>  tmp680;
  std::map<int8_t, int8_t>  tmp681;

  tmp680.insert(std::make_pair(tmp681, 0));
  std::map<int8_t, int8_t>  tmp682;
  tmp682.insert(std::make_pair(1, 1));

  tmp680.insert(std::make_pair(tmp682, 1));
  std::map<int8_t, int8_t>  tmp683;
  tmp683.insert(std::make_pair(2, 2));

  tmp680.insert(std::make_pair(tmp683, 2));

  COMPACT_TEST.map_byte_map = tmp680;
  COMPACT_TEST.__isset.map_byte_map = true;
  std::map<std::set<int8_t> , int8_t>  tmp684;
  std::set<int8_t>  tmp685;

  tmp684.insert(std::make_pair(tmp685, 0));
  std::set<int8_t>  tmp686;
  tmp686.insert(0);
  tmp686.insert(1);

  tmp684.insert(std::make_pair(tmp686, 2));
  std::set<int8_t>  tmp687;
  tmp687.insert(1);
  tmp687.insert(2);
  tmp687.insert(3);

  tmp684.insert(std::make_pair(tmp687, 1));

  COMPACT_TEST.set_byte_map = tmp684;
  COMPACT_TEST.__isset.set_byte_map = true;
  std::map<std::string, int8_t>  tmp688;
  tmp688.insert(std::make_pair("", 0));
  tmp688.insert(std::make_pair("first", 1));
  tmp688.insert(std::make_pair("second", 2));
  tmp688.insert(std::make_pair("third", 3));

  COMPACT_TEST.string_byte_map = tmp688;
  COMPACT_TEST.__isset.string_byte_map = true;
  std::vector<std::string>  tmp689;
  tmp689.push_back("first");
  tmp689.push_back("second");
  tmp689.push_back("third");

  COMPACT_TEST.string_list = tmp689;
  COMPACT_TEST.__isset.string_list = true;
  std::set<std::string>  tmp690;
  tmp690.insert("first");
  tmp690.insert("second");
  tmp690.insert("third");

  COMPACT_TEST.string_set = tmp690;
  COMPACT_TEST.__isset.string_set = true;
  std::vector<Empty>  tmp691;
  Empty tmp692;

  tmp691.push_back(tmp692);
  Empty tmp693;

  tmp691.push_back(tmp693);

  COMPACT_TEST.struct_list = tmp691;
  COMPACT_TEST.__isset.struct_list = true;
  std::set<Empty>  tmp694;
  Empty tmp695;

  tmp694.insert(tmp695);

  COMPACT_TEST.struct_set = tmp694;
  COMPACT_TEST.__isset.struct_set = true;
  COMPACT_TEST.true_field = true;
  COMPACT_TEST.__isset.true_field = true;

  MYCONST = 2;

  MY_SOME_ENUM = static_cast<SomeEnum::type>(1);

  MY_SOME_ENUM_1 = static_cast<SomeEnum::type>(1);

  MY_ENUM_MAP.insert(std::make_pair(static_cast<SomeEnum::type>(1), static_cast<SomeEnum::type>(2)));

  StructWithSomeEnum tmp696;
  tmp696.blah = static_cast<SomeEnum::type>(2);
  tmp696.__isset.blah = true;

  EXTRA_CRAZY_MAP.insert(std::make_pair(static_cast<SomeEnum::type>(1), tmp696));

}

}}} // namespace

