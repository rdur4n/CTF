// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "ParentService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/async/TAsyncProtocolProcessor.h>
#include <thrift/async/TEvhttpServer.h>
#include <event.h>
#include <evhttp.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

using namespace  ::apache::thrift::test;

class ParentServiceHandler : virtual public ParentServiceIf {
 public:
  ParentServiceHandler() {
    // Your initialization goes here
  }

  int32_t incrementGeneration() {
    // Your implementation goes here
    printf("incrementGeneration\n");
  }

  int32_t getGeneration() {
    // Your implementation goes here
    printf("getGeneration\n");
  }

  void addString(const std::string& s) {
    // Your implementation goes here
    printf("addString\n");
  }

  void getStrings(std::vector<std::string> & _return) {
    // Your implementation goes here
    printf("getStrings\n");
  }

  void getDataWait(std::string& _return, const int32_t length) {
    // Your implementation goes here
    printf("getDataWait\n");
  }

  void onewayWait() {
    // Your implementation goes here
    printf("onewayWait\n");
  }

  void exceptionWait(const std::string& message) {
    // Your implementation goes here
    printf("exceptionWait\n");
  }

  void unexpectedExceptionWait(const std::string& message) {
    // Your implementation goes here
    printf("unexpectedExceptionWait\n");
  }

};

class ParentServiceAsyncHandler : public ParentServiceCobSvIf {
 public:
  ParentServiceAsyncHandler() {
    syncHandler_ = std::unique_ptr<ParentServiceHandler>(new ParentServiceHandler);
    // Your initialization goes here
  }
  virtual ~ParentServiceAsyncHandler();

  void incrementGeneration(::std::function<void(int32_t const& _return)> cob) {
    int32_t _return = 0;
    _return = syncHandler_->incrementGeneration();
    return cob(_return);
  }

  void getGeneration(::std::function<void(int32_t const& _return)> cob) {
    int32_t _return = 0;
    _return = syncHandler_->getGeneration();
    return cob(_return);
  }

  void addString(::std::function<void()> cob, const std::string& s) {
    syncHandler_->addString(s);
    return cob();
  }

  void getStrings(::std::function<void(std::vector<std::string>  const& _return)> cob) {
    std::vector<std::string>  _return;
    syncHandler_->getStrings(_return);
    return cob(_return);
  }

  void getDataWait(::std::function<void(std::string const& _return)> cob, const int32_t length) {
    std::string _return;
    syncHandler_->getDataWait(_return, length);
    return cob(_return);
  }

  void onewayWait(::std::function<void()> cob) {
    syncHandler_->onewayWait();
    return cob();
  }

  void exceptionWait(::std::function<void()> cob, ::std::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const std::string& message) {
    syncHandler_->exceptionWait(message);
    return cob();
  }

  void unexpectedExceptionWait(::std::function<void()> cob, const std::string& message) {
    syncHandler_->unexpectedExceptionWait(message);
    return cob();
  }

 protected:
  std::unique_ptr<ParentServiceHandler> syncHandler_;
};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<ParentServiceAsyncHandler> handler(new ParentServiceAsyncHandler());
  ::std::shared_ptr<ParentServiceAsyncProcessor> processor(new ParentServiceAsyncProcessor(handler));
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
  ::std::shared_ptr<TAsyncProtocolProcessor> protocolProcessor(new TAsyncProtocolProcessor(processor, protocolFactory));

  TEvhttpServer server(protocolProcessor, port);
  server.serve();
  return 0;
}

