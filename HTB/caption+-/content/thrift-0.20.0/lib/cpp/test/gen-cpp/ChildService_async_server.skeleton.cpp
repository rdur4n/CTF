// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "ChildService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/async/TAsyncProtocolProcessor.h>
#include <thrift/async/TEvhttpServer.h>
#include <event.h>
#include <evhttp.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

using namespace  ::apache::thrift::test;

class ChildServiceHandler : virtual public ChildServiceIf {
 public:
  ChildServiceHandler() {
    // Your initialization goes here
  }

  int32_t setValue(const int32_t value) {
    // Your implementation goes here
    printf("setValue\n");
  }

  int32_t getValue() {
    // Your implementation goes here
    printf("getValue\n");
  }

};

class ChildServiceAsyncHandler : public ChildServiceCobSvIf {
 public:
  ChildServiceAsyncHandler() {
    syncHandler_ = std::unique_ptr<ChildServiceHandler>(new ChildServiceHandler);
    // Your initialization goes here
  }
  virtual ~ChildServiceAsyncHandler();

  void setValue(::std::function<void(int32_t const& _return)> cob, const int32_t value) {
    int32_t _return = 0;
    _return = syncHandler_->setValue(value);
    return cob(_return);
  }

  void getValue(::std::function<void(int32_t const& _return)> cob) {
    int32_t _return = 0;
    _return = syncHandler_->getValue();
    return cob(_return);
  }

 protected:
  std::unique_ptr<ChildServiceHandler> syncHandler_;
};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<ChildServiceAsyncHandler> handler(new ChildServiceAsyncHandler());
  ::std::shared_ptr<ChildServiceAsyncProcessor> processor(new ChildServiceAsyncProcessor(handler));
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
  ::std::shared_ptr<TAsyncProtocolProcessor> protocolProcessor(new TAsyncProtocolProcessor(processor, protocolFactory));

  TEvhttpServer server(protocolProcessor, port);
  server.serve();
  return 0;
}

