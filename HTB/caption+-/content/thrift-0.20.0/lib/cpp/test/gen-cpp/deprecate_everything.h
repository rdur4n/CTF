/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef deprecate_everything_H
#define deprecate_everything_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "AnnotationTest_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class deprecate_everythingIf {
 public:
  virtual ~deprecate_everythingIf() {}
  virtual void Foo() = 0;
  virtual void Bar() = 0;
  virtual void Baz() = 0;
  virtual void Deprecated() = 0;
};

class deprecate_everythingIfFactory {
 public:
  typedef deprecate_everythingIf Handler;

  virtual ~deprecate_everythingIfFactory() {}

  virtual deprecate_everythingIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(deprecate_everythingIf* /* handler */) = 0;
  };

class deprecate_everythingIfSingletonFactory : virtual public deprecate_everythingIfFactory {
 public:
  deprecate_everythingIfSingletonFactory(const ::std::shared_ptr<deprecate_everythingIf>& iface) : iface_(iface) {}
  virtual ~deprecate_everythingIfSingletonFactory() {}

  virtual deprecate_everythingIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(deprecate_everythingIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<deprecate_everythingIf> iface_;
};

class deprecate_everythingNull : virtual public deprecate_everythingIf {
 public:
  virtual ~deprecate_everythingNull() {}
  void Foo() override {
    return;
  }
  void Bar() override {
    return;
  }
  void Baz() override {
    return;
  }
  void Deprecated() override {
    return;
  }
};


class deprecate_everything_Foo_args {
 public:

  deprecate_everything_Foo_args(const deprecate_everything_Foo_args&) noexcept;
  deprecate_everything_Foo_args& operator=(const deprecate_everything_Foo_args&) noexcept;
  deprecate_everything_Foo_args() noexcept {
  }

  virtual ~deprecate_everything_Foo_args() noexcept;

  bool operator == (const deprecate_everything_Foo_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const deprecate_everything_Foo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const deprecate_everything_Foo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class deprecate_everything_Foo_pargs {
 public:


  virtual ~deprecate_everything_Foo_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class deprecate_everything_Foo_result {
 public:

  deprecate_everything_Foo_result(const deprecate_everything_Foo_result&) noexcept;
  deprecate_everything_Foo_result& operator=(const deprecate_everything_Foo_result&) noexcept;
  deprecate_everything_Foo_result() noexcept {
  }

  virtual ~deprecate_everything_Foo_result() noexcept;

  bool operator == (const deprecate_everything_Foo_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const deprecate_everything_Foo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const deprecate_everything_Foo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class deprecate_everything_Foo_presult {
 public:


  virtual ~deprecate_everything_Foo_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class deprecate_everything_Bar_args {
 public:

  deprecate_everything_Bar_args(const deprecate_everything_Bar_args&) noexcept;
  deprecate_everything_Bar_args& operator=(const deprecate_everything_Bar_args&) noexcept;
  deprecate_everything_Bar_args() noexcept {
  }

  virtual ~deprecate_everything_Bar_args() noexcept;

  bool operator == (const deprecate_everything_Bar_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const deprecate_everything_Bar_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const deprecate_everything_Bar_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class deprecate_everything_Bar_pargs {
 public:


  virtual ~deprecate_everything_Bar_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class deprecate_everything_Bar_result {
 public:

  deprecate_everything_Bar_result(const deprecate_everything_Bar_result&) noexcept;
  deprecate_everything_Bar_result& operator=(const deprecate_everything_Bar_result&) noexcept;
  deprecate_everything_Bar_result() noexcept {
  }

  virtual ~deprecate_everything_Bar_result() noexcept;

  bool operator == (const deprecate_everything_Bar_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const deprecate_everything_Bar_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const deprecate_everything_Bar_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class deprecate_everything_Bar_presult {
 public:


  virtual ~deprecate_everything_Bar_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class deprecate_everything_Baz_args {
 public:

  deprecate_everything_Baz_args(const deprecate_everything_Baz_args&) noexcept;
  deprecate_everything_Baz_args& operator=(const deprecate_everything_Baz_args&) noexcept;
  deprecate_everything_Baz_args() noexcept {
  }

  virtual ~deprecate_everything_Baz_args() noexcept;

  bool operator == (const deprecate_everything_Baz_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const deprecate_everything_Baz_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const deprecate_everything_Baz_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class deprecate_everything_Baz_pargs {
 public:


  virtual ~deprecate_everything_Baz_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class deprecate_everything_Baz_result {
 public:

  deprecate_everything_Baz_result(const deprecate_everything_Baz_result&) noexcept;
  deprecate_everything_Baz_result& operator=(const deprecate_everything_Baz_result&) noexcept;
  deprecate_everything_Baz_result() noexcept {
  }

  virtual ~deprecate_everything_Baz_result() noexcept;

  bool operator == (const deprecate_everything_Baz_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const deprecate_everything_Baz_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const deprecate_everything_Baz_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class deprecate_everything_Baz_presult {
 public:


  virtual ~deprecate_everything_Baz_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class deprecate_everything_Deprecated_args {
 public:

  deprecate_everything_Deprecated_args(const deprecate_everything_Deprecated_args&) noexcept;
  deprecate_everything_Deprecated_args& operator=(const deprecate_everything_Deprecated_args&) noexcept;
  deprecate_everything_Deprecated_args() noexcept {
  }

  virtual ~deprecate_everything_Deprecated_args() noexcept;

  bool operator == (const deprecate_everything_Deprecated_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const deprecate_everything_Deprecated_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const deprecate_everything_Deprecated_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class deprecate_everything_Deprecated_pargs {
 public:


  virtual ~deprecate_everything_Deprecated_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class deprecate_everything_Deprecated_result {
 public:

  deprecate_everything_Deprecated_result(const deprecate_everything_Deprecated_result&) noexcept;
  deprecate_everything_Deprecated_result& operator=(const deprecate_everything_Deprecated_result&) noexcept;
  deprecate_everything_Deprecated_result() noexcept {
  }

  virtual ~deprecate_everything_Deprecated_result() noexcept;

  bool operator == (const deprecate_everything_Deprecated_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const deprecate_everything_Deprecated_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const deprecate_everything_Deprecated_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class deprecate_everything_Deprecated_presult {
 public:


  virtual ~deprecate_everything_Deprecated_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class deprecate_everythingClient : virtual public deprecate_everythingIf {
 public:
  deprecate_everythingClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  deprecate_everythingClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Foo() override;
  void send_Foo();
  void recv_Foo();
  void Bar() override;
  void send_Bar();
  void recv_Bar();
  void Baz() override;
  void send_Baz();
  void recv_Baz();
  void Deprecated() override;
  void send_Deprecated();
  void recv_Deprecated();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class deprecate_everythingProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<deprecate_everythingIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (deprecate_everythingProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Foo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Bar(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Baz(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Deprecated(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  deprecate_everythingProcessor(::std::shared_ptr<deprecate_everythingIf> iface) :
    iface_(iface) {
    processMap_["Foo"] = &deprecate_everythingProcessor::process_Foo;
    processMap_["Bar"] = &deprecate_everythingProcessor::process_Bar;
    processMap_["Baz"] = &deprecate_everythingProcessor::process_Baz;
    processMap_["Deprecated"] = &deprecate_everythingProcessor::process_Deprecated;
  }

  virtual ~deprecate_everythingProcessor() {}
};

class deprecate_everythingProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  deprecate_everythingProcessorFactory(const ::std::shared_ptr< deprecate_everythingIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< deprecate_everythingIfFactory > handlerFactory_;
};

class deprecate_everythingMultiface : virtual public deprecate_everythingIf {
 public:
  deprecate_everythingMultiface(std::vector<std::shared_ptr<deprecate_everythingIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~deprecate_everythingMultiface() {}
 protected:
  std::vector<std::shared_ptr<deprecate_everythingIf> > ifaces_;
  deprecate_everythingMultiface() {}
  void add(::std::shared_ptr<deprecate_everythingIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Foo() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Foo();
    }
    ifaces_[i]->Foo();
  }

  void Bar() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Bar();
    }
    ifaces_[i]->Bar();
  }

  void Baz() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Baz();
    }
    ifaces_[i]->Baz();
  }

  void Deprecated() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Deprecated();
    }
    ifaces_[i]->Deprecated();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class deprecate_everythingConcurrentClient : virtual public deprecate_everythingIf {
 public:
  deprecate_everythingConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  deprecate_everythingConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Foo() override;
  int32_t send_Foo();
  void recv_Foo(const int32_t seqid);
  void Bar() override;
  int32_t send_Bar();
  void recv_Bar(const int32_t seqid);
  void Baz() override;
  int32_t send_Baz();
  void recv_Baz(const int32_t seqid);
  void Deprecated() override;
  int32_t send_Deprecated();
  void recv_Deprecated(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
